#+STARTUP: overview
#+TITLE: Public Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/public_init.el
* Startup Performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 34 1000 3000))

  (setq file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
* Performance
#+Begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024 2))
#+end_src
* Server
#+begin_src emacs-lisp
  (server-start)
#+end_src
* Package Management
** Package initialization
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

** Package Manager
*** Straight
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-enable-package-integration nil)
  (setq straight-enable-use-package-integration t)
#+end_src
** Package Configuration
*** Use-package
#+begin_src emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
**** use-package-ensure-system-package
#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package)
#+end_src
*** No-littering
#+begin_src emacs-lisp
  (use-package no-littering)
#+end_src
* Trash
#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash 't)
  (setq trash-directory "~/.Trash")
#+end_src
* Auto-save
#+begin_src emacs-lisp
  (setq auto-save-interval 100)
  (auto-save-visited-mode)
  (setq auto-save-visited-mode nil)
#+end_src
* Custom
#+begin_src emacs-lisp
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (load custom-file t)
#+end_src
* Backups
#+begin_src emacs-lisp
  (setq delete-old-versions t
        backup-by-copying t
        kept-new-versions 10
        version-control t
        kept-old-versions 5
        vc-make-backup-files t)
#+end_src
* UI
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (column-number-mode)
#+end_src
** Font configuration
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))
#+end_src
* Mouse
#+begin_src emacs-lisp
  (setq mouse-wheel-tilt-scroll t)
  (setq mouse-wheel-flip-direction t)
#+end_src
* Large files size warning
#+begin_src emacs-lisp
  (setq large-file-warning-threshold 60000000)
#+end_src
* Keybinding Configuration
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
    (setq ns-right-alternate-modifier 'none)
    (setq ns-function-modifier 'hyper))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t)
    :config
    (doom-themes-org-config))
#+end_src
* Interface Enhancement
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    (("C-c C-d" . helpful-at-point)
     ([remap describe-function] . helpful-function)
     ([remap describe-symbol] . helpful-symbol)
     ([remap describe-variable] . helpful-variable)
     ([remap describe-command] . helpful-command)
     ([remap describe-key] . helpful-key))
    )
#+end_src
** Dim distracting
*** Solaire-mode
#+begin_src emacs-lisp
  (use-package solaire-mode
    :defer 15
    :config
    (solaire-global-mode))
#+end_src
** Mode-line
*** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 20)
             (doom-modeline-icon t)))
#+end_src
** Display time
#+begin_src emacs-lisp
  (setq display-time-format "%k:%M %b %y"
        display-time-default-load-average nil)
  (display-time)
#+end_src
** Navigation
*** Isearch
#+begin_src emacs-lisp
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)

  (setq search-whitespace-regexp ".*?")
#+end_src
*** Subwords
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
*** Avy
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c j") 'avy-goto-char-timer)
  (setq avy-timeout-seconds 0.30)
#+end_src
*** View-read-only
#+begin_src emacs-lisp
  (setq view-read-only t)
#+end_src
*** DWIM
#+begin_src emacs-lisp
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-c") 'capitalize-dwim)
#+end_src
*** Parentheses
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-o") 'up-list)
#+end_src
*** Other
#+begin_src emacs-lisp
  (global-set-key (kbd "<down>") (lambda () (interactive) (scroll-down -1)))
  (global-set-key (kbd "<up>") (lambda () (interactive) (scroll-down 1)))
  (global-set-key (kbd "s-<SPC>") 'cycle-spacing)
#+end_src
** Minibuffer
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight (vertico)
    :custom
    (vertico-cycle t)
    (vertico-count 11)
    :init
    (vertico-mode)
    :bind (:map vertico-map
                ("M-i"     . vertico-insert))

    )

#+end_src
**** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :custom
    (marginalia-align 'right)
    :init
    (marginalia-mode))
#+end_src
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (("M-g i" . consult-imenu)
           ("C-c f" . consult-recent-file)
           ("C-c F" . agp/recent-directory)
           ("C-x b" . consult-buffer)
           ([remap yank-pop] . consult-yank-pop)
           ([remap goto-line] . consult-goto-line)
           )
    :config
    (add-hook 'eshell-mode-hook (lambda () (setq outline-regexp eshell-prompt-regexp)))
    :init
    ;; Heavily inspired by `consult-recent-file'
    (defun agp/recent-directory ()
      "Find recent directory using `completing-read'."
      (interactive)
      (find-file
       (consult--read
        (or
         (mapcar(lambda (file) (consult--fast-abbreviate-file-name (file-name-directory file)))
                (bound-and-true-p recentf-list))
         (user-error "No recent directories, `recentf-mode' is %s"
                     (if recentf-mode "enabled" "disabled")))
        :prompt "Find recent directory: "
        :sort nil
        :require-match t
        :category 'file
        :state (consult--file-preview)
        :history 'file-name-history))))

#+end_src
*** Fuzzy & Narrowing
**** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
* Editing Enhancement
** Crux
A Collection of Ridiculously Useful eXtensions for Emacs.
#+begin_src emacs-lisp
  (use-package crux
    :bind (("C-c o" . crux-open-with)
           ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
           ("C-z t" . crux-visit-term-buffer)
           ("C-c n" . crux-cleanup-buffer-or-region)
           ("s-k" . crux-smart-kill-line)
           ("s-o" . crux-smart-open-line-above)
           ("C-c e" . crux-eval-and-replace)
           ("C-c D" . crux-delete-file-and-buffer)
           ("C-c r" . crux-rename-file-and-buffer)
           ("C-c S" . crux-find-shell-init-file)
           ("C-c P" . crux-kill-buffer-truename)
           ("C-c i" . crux-ispell-word-then-abbrev)
           )
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-line comment-or-uncomment-region)
    (crux-with-region-or-line kill-region)
    )
#+end_src

** Quotes & Parenthesis & Delimiters Handling
*** Highlight
**** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :disabled
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
**** Show-paren-mode
#+begin_src emacs-lisp
  (setq show-paren-delay 0.1
        show-paren-when-point-inside-paren t)
#+end_src
**** Highlight quoted
#+begin_src emacs-lisp
  (use-package highlight-quoted
    :hook ((emacs-lisp-mode . highlight-quoted-mode)
           (racket-mode . highlight-quoted-mode)
           (lisp-interaction-mode . highlight-quoted-mode)))
#+end_src
*** Insert & Edit
**** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :defer 1
    :config
    (smartparens-global-mode)
    (require 'smartparens-config)
    (sp-pair "¿" "?")
    (sp-pair "¡" "!")
    )
#+end_src
*** Select
**** Expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src
** Indentation Enhancement

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :hook ((emacs-lisp-mode . aggressive-indent-mode)
           (racket-mode . aggressive-indent-mode)
           (lisp-interaction-mode . aggressive-indent-mode)))
#+end_src

** Drag Lines
*** Move-dup
#+begin_src emacs-lisp
  (use-package move-dup
    :hook((prog-mode . move-dup-mode)
          (LaTeX-mode . move-dup-mode)))
#+End_Src
** Pretty icons
*** All-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
*** All-the-icons-completion
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src
** Delete selection mode
#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src
** Embark
#+begin_src emacs-lisp

  (use-package embark
    :bind(("C-." . embark-act)
          ("M-." . embark-dwim)
          ("C-h B" . embark-bindings)
          :map embark-url-map
          ("m" . mpv-play-url)
          )
    :init
    (setq prefix-help-command #'embark-prefix-help-command))
#+end_src
** Kill-ring / Clipboard
*** Kill-ring-max
#+begin_src emacs-lisp
  (setq kill-ring-max 600)
#+end_src
** Undo & Redo
*** Undo limit
#+begin_src emacs-lisp
  (setq undo-strong-limit 2400000)
#+end_src
** Code folding
*** Hideshow
#+begin_src emacs-lisp
  (use-package hideshow
    :bind (:map hs-minor-mode-map
                ("C-c >" . hs-show-all)
                ("C-c <" . hs-hide-all)
                ("C-c ;" . hs-toggle-hiding)
                ("C-c ." . hs-hide-level))
    :hook (prog-mode . hs-minor-mode))
#+end_src
** Fancy icons
*** Prettify-symbols
#+begin_src emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)

  (dolist (mode '(racket-mode-hook lisp-interaction-mode-hook
                                   emacs-lisp-mode))
    (add-hook mode 'prettify-symbols-mode)
    (add-hook mode
              (lambda ()
                (--map (push it prettify-symbols-alist)
                       '(("lambda"      . ?λ))))))

#+end_src
* Window, Buffer & Frame Management
** Switching
#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))
#+end_src
** Layout
*** Winner
#+begin_src emacs-lisp
  (use-package winner
    :defer 3
    :config
    (winner-mode))
#+end_src
** Initial frame
#+begin_src emacs-lisp
  (add-to-list 'initial-frame-alist '(width . 100))
  (add-to-list 'initial-frame-alist '(height . 60))
#+end_src
** Save Frame and Window Configuration
#+begin_src emacs-lisp
  (use-package burly)
#+end_src
* Programming
** Document
*** Devdocs
#+begin_src emacs-lisp
  (use-package devdocs
    :commands (devdocs-lookup)
    :bind (:map prog-mode-map
                ("C-c d" . devdocs-lookup))
    :config
    (add-hook 'python-mode-hook
              (lambda () (setq-local devdocs-current-docs '("python~3.11"))))

    (add-hook 'c++-mode-hook
              (lambda () (setq-local devdocs-current-docs '("cpp" "gcc~12_cpp"))))
    )
#+end_src
** Completion
*** Abbrev
#+begin_src emacs-lisp
  (use-package abbrev
    :defer 3
    :ensure nil
    :hook (text-mode . abbrev-mode))
#+end_src
** Parser
*** Tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :defer 2
    :config
    (require 'tree-sitter-langs)
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    )
#+end_src
** Completion
*** Company
#+begin_src emacs-lisp
  (use-package company
    :init (global-company-mode)
    :bind (("C-M-y" . company-yasnippet)
           :map company-active-map
           ("<tab>" . company-complete-selection)
           ("C-j" . company-select-next-or-abort)
           ("C-k" . company-select-previous-or-abort))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.1)
    (company-show-quick-access t)
    (company-dabbrev-other-buffers t)
    :config
    (setq company-clang-arguments '("-std=c++17"))
    )
#+end_src
*** Abbrev
#+begin_src emacs-lisp
  (setq save-abbrevs 'silently)
  (setq-default abbrev-mode t)
#+end_src
* Image
#+begin_src emacs-lisp
  (use-package image
    :ensure nil
    :hook ((image-mode . image-transform-fit-to-width))
    )
#+end_src

* Recent

** Savehist
#+begin_src emacs-lisp

  (use-package savehist
    :after (no-littering)
    :config
    (savehist-mode)
    (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring avy-ring register-alist
                                                    vertico-repeat-history kmacro-ring))
    (load-file savehist-file)
    )

#+end_src
** Recentf
#+begin_src emacs-lisp

  (use-package recentf
    :ensure nil
    :config
    (setq recentf-max-saved-items 200
          recentf-max-menu-items 200)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    (recentf-mode t)
    )

#+end_src
** Save-place-mode
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src
* Programming Language
** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'")
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'"
    :config (add-hook 'haskell-mode-hook 'interactive-haskell-mode))
#+end_src
** Racket
*** Major-mode
#+begin_src emacs-lisp
  (use-package racket-mode
    :mode "\\.rkt\\'")
#+end_src
*** ob-racket
#+begin_src emacs-lisp
  (use-package ob-racket
    :straight (ob-racket :type git :fetcher github :repo "https://github.com/hasu/emacs-ob-racket")
    :hook (racket-mode . racket-xp-mode))
#+end_src
* Version control
** Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status)

#+end_src
** Git time machine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :commands git-timemachine)
#+end_src
* Integration
** Search
*** Locate
#+begin_src emacs-lisp
  (use-package locate
    :ensure nil
    :bind (:map locate-mode-map
                ("/" . dired-narrow))
    :config
    (setq locate-command "mdfind"))
#+end_src

** Terminals
*** Open external terminal in curernt directory.
#+begin_src emacs-lisp
  (defun open-osx-terminal ()
    "Open osx terminal in current directory."
    (interactive)
    (shell-command "open -a terminal ."))
#+end_src
** Disk usage
#+begin_src emacs-lisp
  (use-package disk-usage
    :straight (disk-usage :type git :fetcher gitlab :repo "https://gitlab.com/ambrevar/emacs-disk-usage"))
#+end_src
* PDF
** PDF-tools
#+begin_src emacs-lisp

  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-tools-install)
    :bind (:map pdf-view-mode-map
                ("j" . pdf-view-next-line-or-next-page)
                ("k" . pdf-view-previous-line-or-previous-page)
                )
    :custom
    (pdf-view-resize-factor 1.05)
    :config
    (setq-default pdf-view-display-size 'fit-page)
    )
#+end_src
** pdf-view-restore
#+begin_src emacs-lisp

  (use-package pdf-view-restore
    :after pdf-tools
    :hook (pdf-view-mode . pdf-view-restore-mode))
#+end_src
** PDF-grep
#+begin_src emacs-lisp
  (use-package pdfgrep
    :ensure-system-package pdfgrep)
#+end_src
* Fun
** Nyan-mode
#+begin_src emacs-lisp
  (use-package nyan-mode
    :defer 10
    :config
    (nyan-mode))
#+end_src
* Repeat
#+begin_src emacs-lisp
  (repeat-mode 1)
#+end_src
* LaTeX
** cdlatex
#+begin_src emacs-lisp
  (use-package cdlatex
    :hook (LaTeX-mode . cdlatex-mode)
    :custom
    (cdlatex-takeover-parenthesis nil)
    (cdlatex-takeover-dollar nil)
    :config
    (defun agp-cdlatex-indent-if-needed ()
      (when (or (use-region-p)
                (bolp)
                (looking-back "^[ \t]+"))
        (indent-for-tab-command)
        't))
    (add-hook 'cdlatex-tab-hook #'agp-cdlatex-indent-if-needed)
    (setq cdlatex-math-symbol-alist '((103 ("\\gamma" "\\to" "\\lg"))))
    (setq cdlatex-auto-help-delay 0.75))

#+end_src
** Revert pdf buffer after compilation
#+begin_src emacs-lisp
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+end_src
* Scratch Buffer
** Scratch Message
#+begin_src emacs-lisp
  (setq-default initial-scratch-message ";; The enjoyment of one's tools is an essential ingredient of succesful work.\n;;-Donald Knuth\n\n")
#+end_src
** Switch to scratch buffer
#+begin_src emacs-lisp
  (defun switch-to-scratch-buffer()
    (interactive)
    (switch-to-buffer "*scratch*"))
  (global-set-key (kbd "C-c s") 'switch-to-scratch-buffer)
#+end_src
* Enable disabled commands
#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)
  (put 'set-goal-column 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src
* Runtime Performance
#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1250))
#+end_src
* File-name-handler-alist back
#+begin_src emacs-lisp
  (setq file-name-handler-alist file-name-handler-alist-original)
  (makunbound 'file-name-handler-alist-original)
#+end_src
